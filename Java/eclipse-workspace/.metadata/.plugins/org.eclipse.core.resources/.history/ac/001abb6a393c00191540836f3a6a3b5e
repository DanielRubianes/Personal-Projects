public class danielRubianesRoman {
	
	private String numerals;
	
	public danielRubianesRoman(String timeInRoman) {
		numerals = timeInRoman;
	}
	
	private static int parseRoman(String string) {
		int decimal = 0;
		String currentChar, nextChar;
		for (int index = 0; index < string.length(); index++) {
			currentChar = string.substring(index, index+1);
			if (index < (string.length()-1)) {
				nextChar = string.substring(index+1, index+2);
			}
			else {nextChar = "";}
			switch (currentChar) {
	        	case "I":
	        		if (nextChar.equals("V")) {
	        			decimal += 4;
	        			index++;
	        		}
	        		else if (nextChar.equals("X")) {
	        			decimal += 9;
	        			index++;
	        		}
	        		else {
	        			decimal += 1;
	        		}
	        		break;
	        	case "V":
	        		decimal += 5;
	        		break;
	        	case "X":
	        		if (nextChar.equals("L")) {
	        			decimal += 40;
	        			index++;
	        		}
	        		else if (nextChar.equals("C")) {
	        			decimal += 90;
	        			index++;
	        		}
	        		else {
	        			decimal += 10;
	        		}
	        		break;
	        	case "L":
	        		decimal += 50;
	        		break;
	        	case "C":
	        		if (nextChar.equals("D")) {
	        			decimal += 400;
	        			index++;
	        		}
	        		else if (nextChar.equals("M")) {
	        			decimal += 900;
	        			index++;
	        		}
	        		else {
	        			decimal += 100;
	        		}
	        		break;
	        	case "D":
	        		decimal += 500;
	        		break;
	        	case "M":
	        		decimal += 1000;
	        		break;
			}
		}
		return decimal;
	}
	
	public static String toRoman(int decimal) {
		
		String roman = "";
		while (decimal > 0) {
			if (decimal >= 1000) {
				decimal -= 1000;
				roman += "M";
			}
			else if (decimal >= 900) {
				decimal -= 900;
				roman += "CM";
			}
			else if (decimal >= 500) {
				decimal -= 500;
				roman += "D";
			}
			else if (decimal >= 400) {
				decimal -= 400;
				roman += "CD";
			}
			else if (decimal >= 100) {
				decimal -= 100;
				roman += "C";
			}
			else if (decimal >= 90) {
				decimal -= 90;
				roman += "XC";
			}
			else if (decimal >= 50) {
				decimal -= 50;
				roman += "L";
			}
			else if (decimal >= 40) {
				decimal -= 40;
				roman += "XL";
			}
			else if (decimal >= 10) {
				decimal -= 10;
				roman += "X";
			}
			else if (decimal >= 9) {
				decimal -= 9;
				roman += "IX";
			}
			else if (decimal >= 5) {
				decimal -= 5;
				roman += "V";
			}
			else if (decimal >= 4) {
				decimal -= 4;
				roman += "IV";
			}
			else if (decimal >= 1) {
				decimal -= 1;
				roman += "I";
			}
		}
		return roman;
	}
	
	public int compareTo(danielRubianesRoman otherTime) {
		int thisHours = Integer.parseInt( convertToDecimalTime().substring(0, numerals.indexOf(":")) );
		int thisMinutes = Integer.parseInt( convertToDecimalTime().substring(numerals.indexOf(":")+1, numerals.length()) );
		int otherHours = Integer.parseInt( otherTime.convertToDecimalTime().substring(0, numerals.indexOf(":")) );
		int otherMinutes = Integer.parseInt( otherTime.convertToDecimalTime().substring(numerals.indexOf(":")+1, numerals.length()) );
		
		if (thisHours > otherHours) {return 1;}
		else if (thisHours < otherHours) {return -1;}
		else {
			if (thisMinutes > otherMinutes) {return 1;}
			else if (thisMinutes < otherMinutes) {return -1;}
			else {return 0;}
		}
	}
	
	public String convertToDecimalTime() {
        String hours = numerals.substring(0, numerals.indexOf(":"));
        String minutes = numerals.substring(numerals.indexOf(":")+1, numerals.length());
        int decimalHours = parseRoman(hours);
        int decimalMinutes = parseRoman(minutes);
        return decimalHours + ":" + decimalMinutes;
	}
}
